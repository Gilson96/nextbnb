generator client {
  provider        = "prisma-client-js"
  output          = "../lib/generated/prisma"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Place {
  id        String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  placeName String @unique
  hosts     Host[]

  Room Room[]
}

model Host {
  id              String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  hostName        String
  hostingYears    Int
  hostDescription String
  placeId         String @db.Uuid
  place           Place  @relation(fields: [placeId], references: [id], onDelete: Cascade)
  rooms           Room[]
}

model Room {
  id              String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  roomDescription String
  roomType        String
  roomRating      Decimal @default(0) @db.Decimal(4, 2)
  roomLatitude    Decimal @default(0) @db.Decimal(9, 6)
  roomLongitude   Decimal @default(0) @db.Decimal(9, 6)
  roomLocation    String
  roomPrice       Int
  roomAbout       String

  placeId String @db.Uuid
  place   Place  @relation(fields: [placeId], references: [id], onDelete: Cascade)

  ownerId String?
  owner   User?   @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  roomAmenities RoomAmenities[]
  roomReviews   RoomReviews[]
  roomGallery   RoomGallery[]
  Booking       Booking[]
  Wishlist      Wishlist[]

  hostId String
  Host   Host   @relation(fields: [hostId], references: [id], onDelete: Cascade)
}

model RoomAmenities {
  id          String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  amenityName String
  roomId      String @db.Uuid
  room        Room   @relation(fields: [roomId], references: [id], onDelete: Cascade)
}

model RoomReviews {
  id                String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  reviewPersonName  String
  reviewDescription String
  reviewDate        String
  roomId            String @db.Uuid
  room              Room   @relation(fields: [roomId], references: [id], onDelete: Cascade)
}

model RoomGallery {
  id       String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  imageUrl String[]
  roomId   String   @db.Uuid
  room     Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
}

model Booking {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId         String
  roomId         String   @db.Uuid
  startDate      DateTime
  endDate        DateTime
  payementAmount Int
  payementMethod String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Wishlist {
  id     String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId String
  roomId String @db.Uuid

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

model User {
  id            String    @id @default(cuid())
  name          String?   @default("NO_NAME")
  email         String    @unique(map: "user_email_idx")
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("user")
  paymentMethod String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  account       Account[]
  session       Session[]
  rooms         Room[]

  Booking Booking[]

  Wishlist Wishlist[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
